import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation, Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { useAuth } from '../contexts/AuthContext';
import { Eye, EyeOff, User, Lock, Mail } from 'lucide-react';

export function Login() {
  const [isRegistering, setIsRegistering] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const { login, register: registerUser, user, isLoading } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();

  const from = location.state?.from?.pathname || '/';

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
  useEffect(() => {
    if (user && !isLoading) {
      console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:', from);
      navigate(from, { replace: true });
    }
  }, [user, isLoading, navigate, from]);

  // –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞
  const loginForm = useForm({
    defaultValues: {
      username: '',
      password: '',
    },
  });

  // –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const registerForm = useForm({
    defaultValues: {
      username: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onLogin = async (data) => {
    const result = await login(data);
    if (result.success) {
      console.log('üîç –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞:', from);
      navigate(from, { replace: true });
    } else if (result.authDisabled) {
      // –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      console.log('üîç –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  };

  const onRegister = async (data) => {
    if (data.password !== data.confirmPassword) {
      registerForm.setError('confirmPassword', {
        message: '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'
      });
      return;
    }

    const { confirmPassword, ...registerData } = data;
    const result = await registerUser(registerData);
    
    if (result.success) {
      setIsRegistering(false);
      loginForm.setValue('username', data.username);
    }
  };

  const currentForm = isRegistering ? registerForm : loginForm;
  const currentSubmit = isRegistering ? onRegister : onLogin;

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div>
          <div className="mx-auto h-16 w-16 bg-blue-600 rounded-lg flex items-center justify-center">
            <span className="text-white font-bold text-2xl">P</span>
          </div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white">
            {isRegistering ? '–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞' : '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'}
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
            P.I.S.D.A. - –°–∏—Å—Ç–µ–º–∞ –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞
          </p>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <form className="mt-8 space-y-6" onSubmit={currentForm.handleSubmit(currentSubmit)}>
          <div className="space-y-4">
            {/* –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            <div>
              <label htmlFor="username" className="sr-only">
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <User className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...currentForm.register('username', {
                    required: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ',
                    minLength: {
                      value: 3,
                      message: '–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞'
                    }
                  })}
                  type="text"
                  className="input-field pl-10"
                  placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                />
              </div>
              {currentForm.formState.errors.username && (
                <p className="mt-1 text-sm text-red-600 dark:text-red-400">
                  {currentForm.formState.errors.username.message}
                </p>
              )}
            </div>

            {/* Email (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
            {isRegistering && (
              <div>
                <label htmlFor="email" className="sr-only">
                  Email
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Mail className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    {...registerForm.register('email', {
                      required: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                      pattern: {
                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email'
                      }
                    })}
                    type="email"
                    className="input-field pl-10"
                    placeholder="Email"
                  />
                </div>
                {registerForm.formState.errors.email && (
                  <p className="mt-1 text-sm text-red-600 dark:text-red-400">
                    {registerForm.formState.errors.email.message}
                  </p>
                )}
              </div>
            )}

            {/* –ü–∞—Ä–æ–ª—å */}
            <div>
              <label htmlFor="password" className="sr-only">
                –ü–∞—Ä–æ–ª—å
              </label>
              <div className="relative">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <Lock className="h-5 w-5 text-gray-400" />
                </div>
                <input
                  {...currentForm.register('password', {
                    required: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
                    minLength: {
                      value: 6,
                      message: '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
                    }
                  })}
                  type={showPassword ? 'text' : 'password'}
                  className="input-field pl-10 pr-10"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                />
                <button
                  type="button"
                  className="absolute inset-y-0 right-0 pr-3 flex items-center"
                  onClick={() => setShowPassword(!showPassword)}
                >
                  {showPassword ? (
                    <EyeOff className="h-5 w-5 text-gray-400" />
                  ) : (
                    <Eye className="h-5 w-5 text-gray-400" />
                  )}
                </button>
              </div>
              {currentForm.formState.errors.password && (
                <p className="mt-1 text-sm text-red-600 dark:text-red-400">
                  {currentForm.formState.errors.password.message}
                </p>
              )}
            </div>

            {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏) */}
            {isRegistering && (
              <div>
                <label htmlFor="confirmPassword" className="sr-only">
                  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
                </label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <Lock className="h-5 w-5 text-gray-400" />
                  </div>
                  <input
                    {...registerForm.register('confirmPassword', {
                      required: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
                    })}
                    type={showPassword ? 'text' : 'password'}
                    className="input-field pl-10"
                    placeholder="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
                  />
                </div>
                {registerForm.formState.errors.confirmPassword && (
                  <p className="mt-1 text-sm text-red-600 dark:text-red-400">
                    {registerForm.formState.errors.confirmPassword.message}
                  </p>
                )}
              </div>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          <div>
            <button
              type="submit"
              disabled={isLoading}
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              ) : (
                isRegistering ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏'
              )}
            </button>
          </div>

          {/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π */}
          <div className="text-center">
            <button
              type="button"
              onClick={() => setIsRegistering(!isRegistering)}
              className="text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300"
            >
              {isRegistering 
                ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏' 
                : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
              }
            </button>
          </div>

          {/* –ì–æ—Å—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø */}
          <div className="text-center">
            <Link
              to="/"
              className="text-sm text-gray-600 hover:text-gray-500 dark:text-gray-400 dark:hover:text-gray-300"
            >
              –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –≥–æ—Å—Ç—å
            </Link>
          </div>
        </form>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
        <div className="mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
          <h3 className="text-sm font-medium text-blue-900 dark:text-blue-100 mb-2">
            –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø
          </h3>
          <p className="text-xs text-blue-700 dark:text-blue-300">
            –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: <strong>admin</strong> / <strong>admin123</strong>
          </p>
        </div>
      </div>
    </div>
  );
} 