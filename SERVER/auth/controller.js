const UserModel = require('./models/user');
const { generateToken } = require('./middleware');
const fs = require('fs-extra');
const path = require('path');

// –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const toolsConfigPath = path.join(__dirname, '..', 'tools-config.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const loadToolsConfig = async () => {
  try {
    if (await fs.pathExists(toolsConfigPath)) {
      return await fs.readJson(toolsConfigPath);
    }
    return { tools: {}, defaultPermissions: {} };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error);
    return { tools: {}, defaultPermissions: {} };
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const checkAuthToolAccess = async (userRole = 'guest') => {
  try {
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (userRole === 'admin') {
      return { allowed: true };
    }

    const toolsConfig = await loadToolsConfig();
    const authTool = toolsConfig.tools?.auth;

    // –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
    if (!authTool) {
      return { allowed: true };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    if (authTool.active === false) {
      return { 
        allowed: false, 
        error: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
        tool: 'auth',
        status: 'disabled'
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    if (authTool.permissions && !authTool.permissions.includes(userRole)) {
      return { 
        allowed: false, 
        error: '–î–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏',
        tool: 'auth',
        role: userRole
      };
    }

    return { allowed: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return { allowed: true };
  }
};

class AuthController {
  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(req, res) {
    try {
      const { username, password } = req.body;

      if (!username || !password) {
        return res.status(400).json({ 
          error: '–¢—Ä–µ–±—É—é—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await UserModel.findByUsername(username);
      if (!user) {
        return res.status(401).json({ 
          error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
      const isValidPassword = await UserModel.validatePassword(user, password);
      if (!isValidPassword) {
        return res.status(401).json({ 
          error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é —Ä–æ–ª—å
      const effectiveRole = UserModel.getEffectiveRole(user);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const accessCheck = await checkAuthToolAccess(effectiveRole);
      if (!accessCheck.allowed) {
        return res.status(403).json(accessCheck);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
      await UserModel.updateLastLogin(user.id);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const token = generateToken(user);

      res.json({
        message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É',
        token,
        user: {
          id: user.id,
          username: user.username,
          role: user.role,
          effectiveRole,
          status: user.status,
          createdAt: user.createdAt,
          lastLogin: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async register(req, res) {
    try {
      const { username, password, role = 'user' } = req.body;

      console.log('üîç –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', { username, role, hasUser: !!req.user, userRole: req.user?.effectiveRole });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!username || !password) {
        return res.status(400).json({ 
          error: '–¢—Ä–µ–±—É—é—Ç—Å—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      if (password.length < 6) {
        return res.status(400).json({ 
          error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º–∏ —Ä–æ–ª—è–º–∏)
      const allowedRoles = ['user'];
      const currentUserRole = req.user?.effectiveRole || 'guest';
      
      if (currentUserRole === 'admin') {
        allowedRoles.push('editor', 'admin');
      }

      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π:', { 
        requestedRole: role, 
        allowedRoles, 
        currentUserRole,
        hasUser: !!req.user,
        userData: req.user ? { id: req.user.id, username: req.user.username, role: req.user.role, effectiveRole: req.user.effectiveRole } : null
      });

      if (!allowedRoles.includes(role)) {
        console.log('‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é:', role);
        return res.status(403).json({ 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–æ–π —Ä–æ–ª—å—é. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: ' + allowedRoles.join(', ') 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π —Ä–æ–ª–∏
      const accessCheck = await checkAuthToolAccess(role);
      if (!accessCheck.allowed) {
        return res.status(403).json({
          error: '–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–∫–ª—é—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
          ...accessCheck
        });
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await UserModel.createUser({
        username,
        password,
        role
      });

      res.status(201).json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
        user: newUser
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        return res.status(409).json({ error: error.message });
      }
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getProfile(req, res) {
    try {
      if (!req.user || req.user.role === 'guest') {
        return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
      }

      const { password, ...userProfile } = req.user;
      
      res.json({
        user: {
          ...userProfile,
          effectiveRole: UserModel.getEffectiveRole(req.user)
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async getUsers(req, res) {
    try {
      const users = await UserModel.getAllUsers();
      
      // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      const safeUsers = users.map(user => {
        const { password, ...safeUser } = user;
        return {
          ...safeUser,
          effectiveRole: UserModel.getEffectiveRole(user)
        };
      });

      res.json({ users: safeUsers });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async updateUser(req, res) {
    try {
      const { userId } = req.params;
      const updates = req.body;

      // –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª–µ–π
      delete updates.id;
      delete updates.createdAt;
      delete updates.lastLogin;

      const updatedUser = await UserModel.updateUser(userId, updates);

      res.json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        user: {
          ...updatedUser,
          effectiveRole: UserModel.getEffectiveRole(updatedUser)
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        return res.status(404).json({ error: error.message });
      }
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async banUser(req, res) {
    try {
      const { userId } = req.params;

      // –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (req.user.id === userId) {
        return res.status(400).json({ 
          error: '–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' 
        });
      }

      const bannedUser = await UserModel.banUser(userId);

      res.json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        user: {
          ...bannedUser,
          effectiveRole: UserModel.getEffectiveRole(bannedUser)
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        return res.status(404).json({ error: error.message });
      }
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async unbanUser(req, res) {
    try {
      const { userId } = req.params;

      const unbannedUser = await UserModel.unbanUser(userId);

      res.json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        user: {
          ...unbannedUser,
          effectiveRole: UserModel.getEffectiveRole(unbannedUser)
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        return res.status(404).json({ error: error.message });
      }
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(req, res) {
    try {
      const { userId } = req.params;

      // –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (req.user.id === userId) {
        return res.status(400).json({ 
          error: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' 
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const userToDelete = await UserModel.findById(userId);
      if (!userToDelete) {
        return res.status(404).json({ 
          error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
        });
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await UserModel.deleteUser(userId);

      res.json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      if (error.message.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
        return res.status(404).json({ error: error.message });
      }
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª—è—Ö
  async getRoles(req, res) {
    try {
      const roles = {
        guest: {
          name: 'guest',
          title: '–ì–æ—Å—Ç—å',
          description: '–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—É–±–ª–∏—á–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º',
          level: 0
        },
        user: {
          name: 'user',
          title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          description: '–î–æ—Å—Ç—É–ø –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–µ—Ä–≤–∏—Å–∞–º',
          level: 1
        },
        editor: {
          name: 'editor',
          title: '–†–µ–¥–∞–∫—Ç–æ—Ä',
          description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏',
          level: 2
        },
        admin: {
          name: 'admin',
          title: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
          description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ',
          level: 3
        }
      };

      res.json({ roles });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  async verifyToken(req, res) {
    try {
      if (!req.user || req.user.role === 'guest') {
        return res.status(401).json({ valid: false });
      }

      res.json({ 
        valid: true,
        user: {
          id: req.user.id,
          username: req.user.username,
          role: req.user.role,
          effectiveRole: req.user.effectiveRole,
          status: req.user.status,
          createdAt: req.user.createdAt,
          lastLogin: req.user.lastLogin
        }
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
}

module.exports = new AuthController(); 