const jwt = require('jsonwebtoken');
const UserModel = require('./models/user');
const fs = require('fs-extra');
const path = require('path');

const JWT_SECRET = process.env.JWT_SECRET || 'pisda-default-secret-key-change-in-production';

// –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const toolsConfigPath = path.join(__dirname, '..', 'tools-config.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
const loadToolsConfig = async () => {
  try {
    if (await fs.pathExists(toolsConfigPath)) {
      return await fs.readJson(toolsConfigPath);
    }
    return { tools: {}, defaultPermissions: {} };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:', error);
    return { tools: {}, defaultPermissions: {} };
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = async (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

  console.log('üîç authenticateToken:', { 
    hasAuthHeader: !!authHeader, 
    hasToken: !!token, 
    path: req.path,
    method: req.method 
  });

  if (!token) {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é —Ä–æ–ª—å
    req.user = { role: 'guest' };
    console.log('üë§ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–æ—Å—Ç–µ–≤–∞—è —Ä–æ–ª—å (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)');
    return next();
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    console.log('üîç JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', { userId: decoded.userId, username: decoded.username, role: decoded.role });
    
    const user = await UserModel.findById(decoded.userId);
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', decoded.userId);
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
    req.user = {
      ...user,
      role: user.role
    };
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:', { 
      id: user.id, 
      username: user.username, 
      role: user.role, 
      status: user.status 
    });
    
    next();
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ JWT:', error.message);
    return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
const requireRole = (requiredRoles) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    }

    const userRole = req.user.role || 'guest';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ä–æ–ª—å
    if (!requiredRoles.includes(userRole)) {
      return res.status(403).json({ 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
        required: requiredRoles,
        current: userRole
      });
    }

    next();
  };
};

// Hierarchy —Ä–æ–ª–µ–π (–∫–∞–∂–¥–∞—è —Ä–æ–ª—å –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–∞–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
const ROLE_HIERARCHY = {
  'guest': 0,
  'user': 1,
  'editor': 2,
  'admin': 3
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–æ–ª–∏
const requireMinRole = (minRole) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    }

    const userRole = req.user.role || 'guest';
    const userLevel = ROLE_HIERARCHY[userRole] || 0;
    const requiredLevel = ROLE_HIERARCHY[minRole] || 0;
    
    if (userLevel < requiredLevel) {
      return res.status(403).json({ 
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞',
        required: minRole,
        current: userRole
      });
    }

    next();
  };
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω
const requireActive = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
  }

  if (req.user.status === 'banned') {
    return res.status(403).json({ 
      error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      bannedAt: req.user.bannedAt
    });
  }

  next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—É—Ä—Å–∞ –∏–ª–∏ –∞–¥–º–∏–Ω
const requireOwnerOrAdmin = (getUserIdFromRequest) => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    }

    const userRole = req.user.role || 'guest';
    
    // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –≤—Å—ë
    if (userRole === 'admin') {
      return next();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª–µ—Ü —Ä–µ—Å—É—Ä—Å–∞
    const resourceUserId = typeof getUserIdFromRequest === 'function' 
      ? getUserIdFromRequest(req) 
      : req.params.userId || req.user.id;

    if (req.user.id !== resourceUserId) {
      return res.status(403).json({ 
        error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
      });
    }

    next();
  };
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (user) => {
  return jwt.sign(
    { 
      userId: user.id, 
      username: user.username,
      role: user.role 
    },
    JWT_SECRET,
    { expiresIn: '7d' }
  );
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
const checkToolAccess = (toolName, requiredPermission = 'guest') => {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' });
    }

    const userRole = (req.user && req.user.role) || 'guest';
    const userLevel = ROLE_HIERARCHY[userRole] || 0;
    const requiredLevel = ROLE_HIERARCHY[requiredPermission] || 0;
    
    if (userLevel < requiredLevel) {
      return res.status(403).json({ 
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É "${toolName}"`,
        required: requiredPermission,
        current: userRole
      });
    }

    next();
  };
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const checkAuthToolAccess = async (req, res, next) => {
  try {
    const userRole = (req.user && req.user.role) || 'guest';
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (userRole === 'admin') {
      return next();
    }

    const toolsConfig = await loadToolsConfig();
    const authTool = toolsConfig.tools?.auth;

    // –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
    if (!authTool) {
      return next();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    if (authTool.active === false) {
      return res.status(403).json({ 
        error: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
        tool: 'auth',
        status: 'disabled'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É
    if (authTool.permissions && !authTool.permissions.includes(userRole)) {
      return res.status(403).json({ 
        error: '–î–æ—Å—Ç—É–ø –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏',
        tool: 'auth',
        role: userRole
      });
    }

    next();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    next();
  }
};

module.exports = {
  authenticateToken,
  requireRole,
  requireMinRole,
  requireActive,
  requireOwnerOrAdmin,
  generateToken,
  checkToolAccess,
  checkAuthToolAccess,
  ROLE_HIERARCHY
}; 